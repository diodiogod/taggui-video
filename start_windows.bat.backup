@echo off
setlocal enabledelayedexpansion

set LOGFILE=taggui_setup.log
set SKIP_GIT=0
set CLEAR_CACHE=0
set CLEAN_OLD=0

echo Logging to %LOGFILE%
echo.

:: Parse command line arguments
if "%1"=="--skip-git" set SKIP_GIT=1
if "%1"=="--clear-cache" set CLEAR_CACHE=1
if "%1"=="--clean-old" set CLEAN_OLD=1

:: Check if git repo exists
if not exist .git (
    echo Note: Not a git repository. Skipping git pull.
    echo %date% %time% - No .git directory found >> %LOGFILE%
) else (
    :: Optional: git pull (can be skipped with flag)
    if %SKIP_GIT% EQU 0 (
        echo Pulling latest changes...
        git pull >> %LOGFILE% 2>&1
        if !ERRORLEVEL! NEQ 0 (
            echo.
            echo ======================================================
            echo WARNING: Could not download latest updates
            echo ======================================================
            echo This usually means:
            echo  - Your internet connection is offline
            echo  - GitHub is temporarily unavailable
            echo  - You have a network/firewall issue
            echo.
            echo You can still run TagGUI with your current version.
            echo %date% %time% - Git pull failed >> %LOGFILE%
            echo.
            set /p CONTINUE=Continue with setup? (Y/N):
            if /i not "!CONTINUE!"=="Y" exit /b 1
            echo OK, skipping update and continuing...
            echo.
        )
    ) else (
        echo Skipping git pull (--skip-git flag)
    )
)

:: Check Python
where python >nul 2>nul || (
    echo ERROR: Python not installed. Please install Python 3.10+
    pause & exit /b 1
)

for /f "tokens=2" %%i in ('python --version 2^>^&1') do set PYVER=%%i
echo Found Python !PYVER!

:: Check if requirements.txt exists
if not exist requirements.txt (
    echo ERROR: requirements.txt not found in current directory
    echo Make sure you are running this script from the TagGUI folder
    pause & exit /b 1
)

:: Check for venv in current directory first, then parent directory
set VENV_PATH=venv
set VENV_EXISTS=0
if not exist %VENV_PATH%\Scripts\activate.bat (
    if exist ..\venv\Scripts\activate.bat (
        set VENV_PATH=..\venv
        set VENV_EXISTS=1
        echo Found virtual environment in parent directory
    ) else (
        echo Creating virtual environment...
        python -m venv %VENV_PATH% >> %LOGFILE% 2>&1
        if !ERRORLEVEL! NEQ 0 (
            echo ERROR: Failed to create venv
            pause & exit /b 1
        )
    )
) else (
    set VENV_EXISTS=1
)

:: Check if venv is corrupted by testing activation
call %VENV_PATH%\Scripts\activate.bat >nul 2>&1
if !ERRORLEVEL! NEQ 0 (
    echo Warning: Virtual environment appears corrupted
    set /p RECREATE=Recreate it? (Y/N):
    if /i "!RECREATE!"=="Y" (
        echo Removing corrupted environment...
        rmdir /s /q %VENV_PATH% >> %LOGFILE% 2>&1
        echo Creating new virtual environment...
        python -m venv %VENV_PATH% >> %LOGFILE% 2>&1
        if !ERRORLEVEL! NEQ 0 (
            echo ERROR: Failed to create venv
            pause & exit /b 1
        )
    )
)

echo Activating virtual environment...
call %VENV_PATH%\Scripts\activate.bat >> %LOGFILE% 2>&1
if !ERRORLEVEL! NEQ 0 (
    echo ERROR: Failed to activate virtual environment
    pause & exit /b 1
)

:: Only install if venv was just created
if %VENV_EXISTS% EQU 0 (
    echo Upgrading pip...
    python -m pip install --upgrade pip >> %LOGFILE% 2>&1

    echo Installing requirements...
    pip install -r requirements.txt >> %LOGFILE% 2>&1
    if !ERRORLEVEL! NEQ 0 (
        echo.
        echo ======================================================
        echo ERROR: Failed to install dependencies
        echo ======================================================
        echo This usually means:
        echo  - Your internet connection is offline
        echo  - A Python package is not compatible with your system
        echo  - A package server is temporarily unavailable
        echo.
        echo Check the log file for details: %LOGFILE%
        echo.
        pause & exit /b 1
    )
    echo Dependencies installed successfully!
) else (
    echo Virtual environment already exists, skipping installation
)

:: Optional: Clear pip cache
if %CLEAR_CACHE% EQU 1 (
    echo Clearing pip cache...
    pip cache purge >> %LOGFILE% 2>&1
    echo Cache cleared.
)

:: Optional: Clean old packages not in requirements.txt
if %CLEAN_OLD% EQU 1 (
    echo Cleaning old packages not in requirements.txt...
    pip list --format=freeze > current_packages.txt
    findstr /V /G:requirements.txt current_packages.txt > old_packages.txt
    if exist old_packages.txt (
        for /f %%i in (old_packages.txt) do (
            pip uninstall -y %%i >> %LOGFILE% 2>&1
        )
        del old_packages.txt current_packages.txt
        echo Old packages removed.
    )
)

:: Run TagGUI
echo.
echo ======================================================
echo Starting TagGUI...
echo ======================================================
echo.
python taggui/run_gui.py
pause
